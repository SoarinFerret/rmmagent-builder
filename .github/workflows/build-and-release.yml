name: Build and Release

on:
  # create a release when a tag is published
  push:
    tags:
      - "*"

jobs:
  build-and-release:
    name: Build and Release Executables
    runs-on: ubuntu-latest

    steps:
      # Checkout this repository
      - name: Checkout Current Repo
        uses: actions/checkout@v3

      # Set up Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21" # Adjust this to your required Go version

      - name: Clone Other Repository
        run: |
          git clone https://github.com/amidaware/rmmagent.git rmmagent
          cd rmmagent
          git checkout ${{ github.ref_name }}

      # Build Linux executables
      - name: Build Linux Executables
        run: |
          cd other-repo
          ARCHS='amd64 386 arm64 arm'
          for arch in ${ARCHS}; do
            env CGO_ENABLED=0 GOOS=linux GOARCH=${arch} go build -ldflags "-s -w" -o ../rmmagent-linux-${arch}
          done

      # Build Windows executables
      - name: Build Windows Executables
        run: |
          cd other-repo
          ARCHS='amd64 386'
          for arch in ${ARCHS}; do
            env CGO_ENABLED=0 GOOS=windows GOARCH=${arch} go build -ldflags "-s -w" -o ../rmmagent-win-${arch}.exe
          done

      # Build macOS executables
      - name: Build macOS Executables
        run: |
          cd other-repo
          ARCHS='amd64 arm64'
          for arch in ${ARCHS}; do
            env CGO_ENABLED=0 GOOS=darwin GOARCH=${arch} go build -ldflags "-s -w" -o ../rmmagent-darwin-${arch}
          done

      # Upload artifacts
      - name: Upload Executables
        uses: actions/upload-artifact@v3
        with:
          name: executables
          path: |
            rmmagent-linux-*
            rmmagent-win-*.exe
            rmmagent-darwin-*

      # Create a GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      # Upload assets to the release
      - name: Upload Assets to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: |
            rmmagent-linux-*
            rmmagent-win-*.exe
            rmmagent-darwin-*
          asset_name: ${{ basename(asset_path) }}
          asset_content_type: application/octet-stream
